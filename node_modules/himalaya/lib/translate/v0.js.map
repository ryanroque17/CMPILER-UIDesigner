{"version":3,"sources":["translate/v0.js"],"names":["serializeAttr","dasherize","inlineStyle","toHTML","isWhitespaceNode","toPug","multilineText","maxSharedIndent","doctypeShortcut","attr","value","isXml","text","toString","quoteEscape","indexOf","quote","str","trim","replace","toLowerCase","style","Object","keys","reduce","css","key","slice","tree","options","doctype","html","walk","node","type","tagName","attributes","content","tag","val","prop","join","autoClose","innerds","children","newline","indentation","multi","filter","jade","depth","id","className","redundantDiv","length","attrs","props","map","lowTagName","format","line","hasTab","indent","lead","lines","split","start","num","Math","min","trimLeft","Infinity"],"mappings":"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","file":"v0.js","sourcesContent":["import paul from 'paul'\nimport {\n  stringIncludes,\n  arrayIncludes\n} from '../compat'\nimport {voidTags} from '../tags'\n\nexport function serializeAttr (attr, value, isXml) {\n  if (!isXml && attr === value) return attr\n  const text = value.toString()\n  const quoteEscape = text.indexOf('\\'') !== -1\n  const quote = quoteEscape ? '\"' : '\\''\n  return attr + '=' + quote + text + quote\n}\n\n// stolen from underscore.string\nexport function dasherize (str) {\n  return str.trim()\n    .replace(/([A-Z])/g, '-$1')\n    .replace(/[-_\\s]+/g, '-')\n    .toLowerCase()\n}\n\nexport function inlineStyle (style) {\n  return Object.keys(style).reduce((css, key) => {\n    return `${css}; ${dasherize(key)}: ${style[key]}`\n  }, '').slice(2)\n}\n\nexport function toHTML (tree, options = {}) {\n  const {doctype} = options\n  const isXml = doctype === 'xml'\n  const html = paul.walk(tree, (node, walk) => {\n    const {type, tagName, attributes, content} = node\n    if (type === 'Text') return content\n    if (type === 'Comment') return `<!--${content}-->`\n    let tag = '<' + tagName\n    for (const attr in attributes) {\n      const val = attributes[attr]\n      if (attr === 'dataset') {\n        for (const prop in val) {\n          const key = 'data-' + dasherize(prop)\n          tag += ' ' + serializeAttr(key, val[prop], isXml)\n        }\n        continue\n      }\n\n      if (attr === 'style') {\n        tag += ' ' + serializeAttr(attr, inlineStyle(val))\n        continue\n      }\n\n      if (attr === 'className') {\n        tag += ' ' + serializeAttr('class', val.join(' '))\n        continue\n      }\n\n      tag += ' ' + serializeAttr(dasherize(attr), val, isXml)\n    }\n\n    tag += '>'\n    const autoClose = !isXml && arrayIncludes(voidTags, tagName.toLowerCase())\n    if (autoClose) return tag\n\n    const innerds = walk(node.children || []).join('')\n    return tag + innerds + `</${tagName}>`\n  })\n  if (html.join) return html.join('')\n  return html\n}\n\nconst newline = '\\n'\n\nexport function isWhitespaceNode (node) {\n  return !(node.type === 'Text' && !node.content.trim())\n}\n\nexport function toPug (tree, options = {indentation: '  '}) {\n  let {doctype} = options\n  const multi = multilineText(options.indentation)\n\n  if (tree.filter) tree = tree.filter(isWhitespaceNode)\n  const jade = paul.walk(tree, (node, walk, depth) => {\n    const {type, tagName, attributes} = node\n    if (type === 'Text') {\n      return multi(node.content, depth, '| ')\n    }\n    if (type === 'Comment') {\n      const text = node.content\n      return ~text.indexOf(newline)\n        ? multi('//', depth) + newline + multi(text, depth + 1)\n        : multi('//' + text, depth)\n    }\n    let tag = tagName\n    const {id, className} = attributes\n    if (id) tag += `#${id}`\n    if (className) tag += `.${className.join('.')}`\n\n    const redundantDiv = node.tagName === 'div' && tag.length > 3\n    if (redundantDiv) tag = tag.slice(3)\n\n    tag = multi(tag, depth)\n    const attrs = node.attributes\n    const props = Object.keys(attrs).filter(key => {\n      return key !== 'className' && key !== 'id'\n    })\n    if (props.length) {\n      const isXml = doctype === 'xml'\n      tag += '('\n      tag += props.map(prop => {\n        const val = attrs[prop]\n        if (prop === 'dataset') {\n          return Object.keys(val).map(attr => {\n            return serializeAttr('data-' + dasherize(attr), val[attr], isXml)\n          }).join(', ')\n        }\n        if (prop === 'style') return serializeAttr(prop, inlineStyle(val))\n        return serializeAttr(dasherize(prop), val, isXml)\n      }).join(', ')\n      tag += ')'\n    }\n    const lowTagName = node.tagName.toLowerCase()\n    if (arrayIncludes(voidTags, lowTagName)) {\n      if (lowTagName === '!doctype') {\n        if (!doctype) doctype = doctypeShortcut(tag)\n        return multi('doctype ' + doctype, depth)\n      }\n      return tag\n    }\n\n    const {children} = node\n    if (!children.length) return tag\n    if (children.length === 1 && children[0].type === 'Text') {\n      const text = children[0].content\n      return ~text.indexOf(newline)\n        ? tag + '.' + newline + multi(text, depth + 1)\n        : tag + ' ' + text\n    }\n\n    return tag + newline +\n      walk(children.filter(isWhitespaceNode), depth + 1).join(newline)\n  }, 0)\n  if (jade.join) return jade.join(newline)\n  return jade\n}\n\nexport function multilineText (indentation) {\n  let format = line => line\n  const hasTab = stringIncludes(indentation, '\\t')\n  if (hasTab) {\n    format = line => line.replace(/\\t/g, indentation)\n  }\n\n  function indent (depth, str) {\n    while (depth--) {\n      str = indentation + str\n    }\n    return str\n  }\n\n  return function (str, depth, lead = '') {\n    const lines = str\n      .split(newline)\n      .map(format)\n      .filter(line => !!line.trim())\n\n    const start = maxSharedIndent(lines)\n    return lines\n      .map(line => indent(depth, lead + line.slice(start)))\n      .join(newline)\n  }\n}\n\nexport function maxSharedIndent (lines) {\n  return lines.reduce(function (num, line) {\n    return Math.min(num, line.length - line.trimLeft().length)\n  }, Infinity)\n}\n\n// see http://jade-lang.com/reference/doctype/\nexport function doctypeShortcut (str) {\n  if (stringIncludes(str, 'Transitional')) return 'transitional'\n  if (stringIncludes(str, 'strict')) return 'strict'\n  if (stringIncludes(str, 'Frameset')) return 'frameset'\n  if (stringIncludes(str, 'Basic')) return 'basic'\n  if (stringIncludes(str, '1.1')) return '1.1'\n  if (stringIncludes(str, 'Mobile')) return 'mobile'\n  return 'html'\n}\n\nexport default {\n  toHTML,\n  toPug\n}\n"]}