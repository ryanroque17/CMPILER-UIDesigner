{"version":3,"sources":["index.js"],"names":["parse","parseDefaults","format","voidTags","closingTags","childlessTags","closingTagAncestorBreakers","str","options","tokens","nodes"],"mappings":";;;;;;QAkBgBA,K,GAAAA,K;;AAlBhB;;;;AACA;;;;AACA;;;;AACA;;;;AAOO,IAAMC,wCAAgB;AAC3BC,qBAD2B,EACnB;AACRC,0BAF2B;AAG3BC,gCAH2B;AAI3BC,oCAJ2B;AAK3BC;AAL2B,CAAtB;;AAQA,SAASN,KAAT,CAAgBO,GAAhB,EAA8C;AAAA,MAAzBC,OAAyB,uEAAfP,aAAe;;AACnD,MAAMQ,SAAS,qBAAMF,GAAN,EAAWC,OAAX,CAAf;AACA,MAAME,QAAQ,sBAAOD,MAAP,EAAeD,OAAf,CAAd;AACA,SAAOA,QAAQN,MAAR,CAAeQ,KAAf,EAAsBF,OAAtB,CAAP;AACD;;kBAEc,EAACR,YAAD,EAAQC,4BAAR,E","file":"index.js","sourcesContent":["import lexer from './lexer'\nimport parser from './parser'\nimport format from './formats/v0'\nimport {\n  voidTags,\n  closingTags,\n  childlessTags,\n  closingTagAncestorBreakers\n} from './tags'\n\nexport const parseDefaults = {\n  format, // transform for v0 spec\n  voidTags,\n  closingTags,\n  childlessTags,\n  closingTagAncestorBreakers\n}\n\nexport function parse (str, options = parseDefaults) {\n  const tokens = lexer(str, options)\n  const nodes = parser(tokens, options)\n  return options.format(nodes, options)\n}\n\nexport default {parse, parseDefaults}\n"]}